#include "classStack.h"

//СТЕК - структура организации памяти (структура данных), при которой первыми удаляются те данные, которые были записаны последними.
//обычно используется в функциях.

//ОЧЕРЕДЬ - также структура организации памяти, которая напоминает стек, но при этом первым удаляется элемент, который был записан первым.
//т.е. данные в стеке и очереди последовательно расположены, обход их узлов линеен, как, например, у массива. 

//ДЕРЕВО - это уже не последовательная структура хранения данных,
//используется много где и много в каких задачах в том числе вне контекста программирования.
//представляет собой граф, правда со своими особенностями (например, отсутствие простых циклов, т.е., проходя по ребрам дерева
//невозможно попасть из начальной вершины в конечную (если они являются одной и той же вершиной), проходя по ребрам всего один раз).
//у дерева много своих терминов (например, листья, - вершина, на которой оканчивается "ветка" дерева).
//самый распространенный вид - это бинарное дерево.
//распределение в нем происходит так, что левый потомок всегда имеет меньшее значение, чем свой родитель, а правый - всегда большее.
//используется, например, в контейнере map.

int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(NULL));

    int N;
    std::cout << "Введите кол-во элементов в стеке (не больше 15 для одного стека, иначе будет переполнен!): ";
    std::cin >> N;
    
    //все необходимые объекты (основной стек, стек для копирования, стек для сложения)
    Stack ctuck(N);
    Stack* stack_copy = new Stack(0);
    Stack new_one(1 + rand() % 15);

    //ПРЕАМБУЛА
    std::cout << "0 - Выйти из программы. " << std::endl;
    std::cout << "1 - Сообщение о том, что стек пуст." << std::endl;
    std::cout << "2 - Сообщение о том, что стек переполнен." << std::endl;
    std::cout << "3 - Копировать весь стек в новый объект." << std::endl;
    std::cout << "4 - Добавить элемент в стек." << std::endl;
    std::cout << "5 - Удалить элемент из стека и вывести стек на экран." << std::endl;
    std::cout << "6 - Удалить весь стек (выходит из программы)." << std::endl;
    std::cout << "7 - Вывести информацию о длине стека." << std::endl;
    std::cout << "8 - Вывести стек в терминал. " << std::endl;
    
 
    //ВЫВЕДЕНИЕ ФУНКЦИОНАЛА КЛАССА В КОНСОЛЬ
    while (1){
        
        std::cout << "Введите цифру: ";
        std::cin >> N;
        switch (N)
        {
        case 0:
        {
            std::cout << "Бонус! Сейчас вам будут представлены два сложенные стека (один, который только что использовался," << std::endl;
            std::cout << "а второй с рандомным количеством элементов), а так же полученный стек только с уникальными элементами и его инвертированная версия." << std::endl;
            
            ctuck || new_one;
            ctuck.reverse();
            std::cout << std::endl;

            std::cout << "Спасибо за то, что выбрали именно нашу программу!" << std::endl;
            std::cout << std::endl << "---------------------------------------" << std::endl;
            delete stack_copy;

            return 0;
        }
        case 1:
            ctuck.stackIsEmpty();
            break;
        case 2:
            ctuck.stackIsOverflow();
            break;
        case 3:
        {  
            *stack_copy = ctuck;
            break;
        }
        case 4:
            ctuck.push();
            break;

        case 5:
            ctuck.pop();
            break;
        case 6:
        {
            std::cout << "Бонус! Сейчас вам будут представлены два сложенные стека (один, который только что использовался," << std::endl;
            std::cout << "а второй с рандомным количеством элементов), а так же полученный стек только с уникальными элементами и его инвертированная версия." << std::endl;

            ctuck || new_one;
            ctuck.reverse();
            std::cout << std::endl;

            ctuck.stackIsEmpty();
            std::cout << "Спасибо за то, что выбрали именно нашу программу!" << std::endl;
            std::cout << std::endl << "---------------------------------------" << std::endl;
            delete stack_copy;
            
            return 0;
        }
        case 7:
            ctuck.size();
            break;
        case 8:
            ctuck.print();
            break;
        default:
        {
            std::cout << "Бонус! Сейчас вам будут представлены два сложенные стека (один, который только что использовался," << std::endl;
            std::cout << "а второй с рандомным количеством элементов), а так же полученный стек только с уникальными элементами и его инвертированная версия." << std::endl;

            ctuck || new_one;
            ctuck.reverse();
            std::cout << std::endl;

            std::cout << "Такой цифры не было среди предложенных." << std::endl;
            std::cout << std::endl << "---------------------------------------" << std::endl;
            delete stack_copy;
           
            return 0;
        }
            
        }
    }

    return 0;
}


